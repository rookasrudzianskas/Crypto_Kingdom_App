this is the plan 🔥

1. Finally have managed to fix the lambda function trigerring and setting the user. NOw, just need to clarify what is going on with the user.




// lambda was triggered

2021-08-25T08:27:12.341Z	935f3052-e406-4cbe-be01-a9556cdf31ba	INFO	Response body:
 {
    "Status": "SUCCESS",
    "Reason": "See the details in CloudWatch Log Stream: 2021/08/25/[$LATEST]874f7df65f2242d29360bc08329685b2",
    "PhysicalResourceId": "2021/08/25/[$LATEST]874f7df65f2242d29360bc08329685b2",
    "StackId": "arn:aws:cloudformation:us-east-1:986698840618:stack/amplify-cryptokingdom-dev-144358-AuthTriggerCustomLambdaStack-SKDWN2018ESI/22e98430-057e-11ec-82ef-0a90b79301c3",
    "RequestId": "0e678d58-5ba7-4a36-972c-c334827f906e",
    "LogicalResourceId": "CustomAuthTriggerResource",
    "NoEcho": false,
    "Data": {
        "result": {}
    }
}

// trigerring
// the attributes mapping does work
// working on writing to DynamoDB
// alright, users from cognito pool are going straight to the dynamo db! It works, this shit works 🔥
// the users in dybamodb are working, then I needed to login to the cognito pool, to use the queries and mutations. I have logged in just with Google account
and have not have username and password, so I created the account with testing ui, but the confirm does not work. I found out, on user pool, then
selecting the user you can add it to the group, I have added and it worked out, it got confirmed! I am in! 🐙

// Moving on, every user 100K does not work

// we are moving forward, but the lamba function is successfully published to aws, but does not trigger the function to add 100K to each user.

let's see what is going to happen here

??!! alright, managed to make it working! It puts the user to the DynamoDB and sets 100K to each user in PortfolioCoin Table! Fucking amazing!

// the goal is to clarify what context.done(null, event) is going to do! We do not need it in here at all

// this shit actually works

// api schema is done

try {
                await getCoin(ctx.arguments.coinId);
            } catch (e) {
                console.log("Error getting the coin");
                console.log(e);
            }

            try {
                await getUsdAmount(ctx.arguments.usdPortfolioCoinId, ctx.identity.sub);
            } catch (e) {
                console.log("Error getting the USD Coin");
                console.log(e);
            }


            try {
                await getCoinAmount(ctx.arguments.coinPortfolioCoinId, ctx.identity.sub);
            } catch (e) {
                console.log("Error getting the USD Coin");
                console.log(e);
            }

// --------------------

?? It works somehow?! 🔥



// const { CognitoIdentityServiceProvider,  DynamoDB} = require('aws-sdk');
// // const cognitoIdentityServiceProvider = new CognitoIdentityServiceProvider();
// const ddb = new DynamoDB();
//
// // /**
// //  * Get user pool information from environment variables.
// //  */
// //
// // const COGNITO_USERPOOL_ID = process.env.COGNITO_USERPOOL_ID;
// // if (!COGNITO_USERPOOL_ID) {
// //     throw new Error(`Function requires environment variable: 'COGNITO_USERPOOL_ID'`);
// // }
// // const COGNITO_USERNAME_CLAIM_KEY = 'cognito:username';
//
//
//
// const getCoinAmount = async (coinPortfolioCoinId, userId) => {
//     const params = {
//         Key: {
//             id: { S: coinPortfolioCoinId },
//         },
//         TableName: process.env.PORTFOLIO_COIN_TABLE,
//     }
//     const coinData = await ddb.getItem(params).promise();
//     console.log('portfolio coin data');
//     console.log(coinData);
//     // @TODO check if it is indeed the coin and belongs to the user
//     // userId: { S: userId },
//
//     if(coinData && coinData.Item && coinData.Item.amount && coinData.Item.amount.N) {
//         return coinData.Item.amount.N;
//     }
//     return 0;
//     // return coinData?.Item?.amount?.N || 0;
// }
//
//
// const getUsdAmount = async (usdPortfolioCoinId, userId) => {
//     const params = {
//         Key: {
//             id: { S: usdPortfolioCoinId },
//         },
//         TableName: process.env.PORTFOLIO_COIN_TABLE,
//     }
//     const coinData = await ddb.getItem(params).promise();
//     console.log('usd coin data');
//     console.log(coinData);
//
//     // @TODO check if it is indeed the usd coin and belongs to the user
//
//     // coinId: { S: process.env.USD_COIN_ID },
//     // userId: { S: userId },
//     if(coinData && coinData.Item && coinData.Item.amount && coinData.Item.amount.N) {
//         return coinData.Item.amount.N;
//     }
//     return 0;
//     // return coinData?.Item?.amount?.N || 0;
//
// }
//
// const getCoin = async (coinId)  => {
//     const params = {
//         Key: {
//           id: { S: coinId }
//         },
//         TableName: process.env.COIN_TABLE,
//     }
//     const coinData = await ddb.getItem(params).promise();
//     console.log('coin data');
//     console.log(coinData);
//     return coinData;
// }
//
//
// const canBuyCoin = (coin, amountToBuy, usdAmount) => {
//     return usdAmount >= coin.Item.currentPrice.N * amountToBuy
// }
//
// const canSellCoin = (amountToSell, portfolioAmount) => {
//     return portfolioAmount >= amountToSell
// }
//
// const buyCoin = async(
//     coin,
//     amountToBuy,
//     usdPortfolioCoinId,
//     coinAmount,
//     userId,
//     usdAmount
// ) => {
//     const date = new Date();
//     // decrease USD to buy coin
//     const newUsdAmount = usdAmount - coin.Item.currentPrice.N * amountToBuy;
//     const params = {
//         Item: {
//             id: { S: usdPortfolioCoinId },
//             '__typename': { S: 'PortfolioCoin' },
//             'createdAt': { S: date.toISOString() },
//             'updatedAt': { S: date.toISOString() },
//             'userId': { S: userId.toString() },
//             'coinId': { S: process.env.USD_COIN_ID },
//             'amount': { N: newUsdAmount.toString() }
//         },
//         TableName: process.env.PORTFOLIO_COIN_TABLE,
//     }
//     await ddb.putItem(params).promise();
//
//     // add new portfolio coin, or update the existing one
//
//
//     const newCoinAmount = coinAmount + amountToBuy;
//     const params1 = {
//         Item: {
//             id: { S: `${userId}-${coin.Item.symbol.S}` },
//             '__typename': { S: 'PortfolioCoin' },
//             'createdAt': { S: date.toISOString() },
//             'updatedAt': { S: date.toISOString() },
//             'userId': { S: userId },
//             'coinId': { S: coin.Item.id.S },
//             'amount': { N: newCoinAmount.toString() }
//         },
//         TableName: process.env.PORTFOLIO_COIN_TABLE,
//     }
//     await ddb.putItem(params1).promise();
//
// }
//
// const sellCoin = async(
//     coin,
//     amountToSell,
//     usdPortfolioCoinId,
//     coinAmount,
//     userId,
//     usdAmount
// ) => {
//     const date = new Date();
//     // increase USD
//     const newUsdAmount = usdAmount + coin.Item.currentPrice.N * amountToSell;
//     const params = {
//         Item: {
//             id: { S: usdPortfolioCoinId },
//             '__typename': { S: 'PortfolioCoin' },
//             'createdAt': { S: date.toISOString() },
//             'updatedAt': { S: date.toISOString() },
//             'userId': { S: userId },
//             'coinId': { S: process.env.USD_COIN_ID },
//             'amount': { N: newUsdAmount.toString() }
//         },
//         TableName: process.env.PORTFOLIO_COIN_TABLE,
//     }
//     await ddb.putItem(params).promise();
//
//     // add new portfolio coin, or update the existing one
//
//
//     const newCoinAmount = coinAmount - amountToSell;
//     const params1 = {
//         Item: {
//             id: { S: `${userId}-${coin.Item.symbol.S}` },
//             '__typename': { S: 'PortfolioCoin' },
//             'createdAt': { S: date.toISOString() },
//             'updatedAt': { S: date.toISOString() },
//             'userId': { S: userId },
//             'coinId': { S: coin.Item.id.S },
//             'amount': { N: newCoinAmount.toString() }
//         },
//         TableName: process.env.PORTFOLIO_COIN_TABLE,
//     }
//     await ddb.putItem(params1).promise();
//
// }
//
//
// /**
//  * Using this as the entry point, you can use a single function to handle many resolvers.
//  */
//
// const resolvers = {
//     Mutation: {
//         exchangeCoins: async ctx => {
//             console.log('ctx')
//             console.log(ctx);
//             const {
//                 coinId,
//                 isBuy,
//                 amount,
//                 usdPortfolioCoinId,
//                 coinPortfolioCoinId,
//             } = ctx.arguments;
//             const userId = ctx.identity.sub;
//
//             const usdAmount = !usdPortfolioCoinId ? 0 : await getUsdAmount(usdPortfolioCoinId, userId);
//             const coinAmount = !coinPortfolioCoinId ? 0 : await getCoinAmount(coinPortfolioCoinId, userId);
//             // const params = {
//             //     UserPoolId: COGNITO_USERPOOL_ID, /* required */
//             //     Username: ctx.identity.claims[COGNITO_USERNAME_CLAIM_KEY], /* required */
//             // };
//             // try {
//             //     // Read more: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html#adminGetUser-property
//             //     const userResponse = await cognitoIdentityServiceProvider.adminGetUser(params).promise();
//             //     console.log(userResponse);
//             // } catch (e) {
//             //     console.log(e);
//             //     // throw new Error(`NOT FOUND`);
//             // }
//
//             // const usdAmount = !usdPortfolioCoinId ? 0 : await getUsdAmount(usdPortfolioCoinId, userId);
//             // const coinAmount = !coinPortfolioCoinId ? 0 : await getCoinAmount(coinPortfolioCoinId, userId);
//             const coin = await getCoin(coinId);
//
//             try {
//                 if (isBuy && canBuyCoin(coin, amount, usdAmount)) {
//                     await buyCoin(coin, amount, usdPortfolioCoinId, usdAmount, coinAmount, userId);
//                 }
//                 else if (!isBuy && canSellCoin(amount, coinAmount)) {
//                     await sellCoin(coin, amount, usdPortfolioCoinId, usdAmount, coinAmount, userId);
//                 } else {
//                     throw new Error(isBuy ? `Not enough USD` : 'Not enough coins to sell');
//                 }
//             } catch (e) {
//                 console.log(e);
//                 throw new Error('Unexpected Error exchanging coins');
//             }
//
//             return true;
//         }
//     },
// }
//
// // event
// // {
// //   "typeName": "Query", /* Filled dynamically based on @function usage location */
// //   "fieldName": "me", /* Filled dynamically based on @function usage location */
// //   "arguments": { /* GraphQL field arguments via $ctx.arguments */ },
// //   "identity": { /* AppSync identity object via $ctx.identity */ },
// //   "source": { /* The object returned by the parent resolver. E.G. if resolving field 'Post.comments', the source is the Post object. */ },
// //   "request": { /* AppSync request object. Contains things like headers. */ },
// //   "prev": { /* If using the built-in pipeline resolver support, this contains the object returned by the previous function. */ },
// // }
// exports.handler = async (event) => {
//     const typeHandler = resolvers[event.typeName];
//     if (typeHandler) {
//         const resolver = typeHandler[event.fieldName];
//         if (resolver) {
//             return await resolver(event);
//         }
//     }
//     throw new Error("Resolver not found.");
// };


Almost Done
